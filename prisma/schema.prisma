generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?   // Ajoutez ce champ
  image         String?
  score         String?
  accounts      Account[]
  sessions      Session[]
  scores        score[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model dictation {
  id                     String  @id @default(cuid())
  text                   String
  title                  String  @unique
  level                  String
  audio_url              String
  audio_name             String
  audio_total_part       Int?
  audio_duration_minutes Int?
  audio_duration_seconds Int?
  excerpt                String?
  image_url              String? @db.VarChar(255)
  score                  score[]

  @@map("dictation")
}

model helper {
  id            String        @id @default(cuid())
  title         String        @unique
  generate_type String
  number_vote   Int
  description   description[]
  helper_word   helper_word[]

  @@map("helper")
}

model word {
  id          String        @id @default(cuid())
  name        String        @unique
  helper_word helper_word[]

  @@map("word")
}

model helper_word {
  id        String @id @default(cuid())
  word_id   String
  helper_id String
  helper    helper @relation(fields: [helper_id], references: [id])
  word      word   @relation(fields: [word_id], references: [id])

  @@map("helper_word")
}

model description {
  id       String  @id @default(cuid())
  title    String?
  helperId String?
  text     String
  helper   helper? @relation(fields: [helperId], references: [id])

  @@map("description")
}

model score {
  id              String     @id @default(dbgenerated("nextval('score_id_seq'::regclass)"))
  user_id         String?
  dictation_id    String?
  note            Int?
  score           Int?
  timer           String?    @db.VarChar(255)
  correct_words   Int?
  incorrect_words Int?
  pourcentage     Float?
  dictation       dictation? @relation(fields: [dictation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            User?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
